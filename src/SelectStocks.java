/*
CLASS NAME:

          SelectStocks

SYNOPSIS

		function private ArrayList<String> LoadStocksName()
			Loads stock names from stock.txt file
			Returns string array of stock names
		
		EventListener btnSubmit.addActionListener(new ActionListener()
			Opens RunPredictor frame
			Gathers the name of all stocks selected and sends it to RunPredictor
			If no stocks selected, asks the user to select stocks for trading
				
			

DESCRIPTION

		Populates the checkboxes according to the data in stock.txt file
		Allows users to select the stocks
		After users select the stocks they wish to trade, it opens Simulator Frame for further trading.
		

RETURNS

        Not Applicable

AUTHOR

       Arjun Bastola

# DATE

#       6:57 PM 02/29/2017

*/



import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import java.awt.Color;
import java.awt.Component;
import java.awt.BorderLayout;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.JScrollPane;
import javax.swing.JButton;



public class SelectStocks
{
	//List to store names of available stocks
	private ArrayList<String> SelectedStocks = new ArrayList<String>();
	private JFrame frame;

	/**
	 * Launch the application.
	 */

	public static void main(String[] args)
	{
		EventQueue.invokeLater(new Runnable()
		{
			//run and view the swing frame
			public void run()
			{
				try
				{
					SelectStocks window = new SelectStocks();
					window.frame.setVisible(true);
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public SelectStocks()
	{
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */

	/**
	 * Load Stocks Names from stock.txt file
	 */

	/**
	 * Function LoadStocksName
	 * 
	 * Description: Loads available stocks from stock.txt which was generated by
	 * 
	 */

	
	/*
	 * 
	 
	function private ArrayList<String> LoadStocksName()
		Loads stock names from stock.txt file
		Returns string array of stock names

	 
	 * 
	 */
	private ArrayList<String> LoadStocksName()
	{
		ArrayList<String> list = new ArrayList<String>();
		Scanner s;
		try
		{
			//read the txt file which contains the stocks
			s = new Scanner(new File("stock.txt"));
			
			//add all stock names to the list
			while (s.hasNext())
			{
				list.add(s.next());
			}
			
			s.close();
			return list;
		} catch (FileNotFoundException e)
		{
			e.printStackTrace();
			return null;
		}
	}

	private void initialize()
	{

		// Initialize a New Java Frame
		frame = new JFrame();

		// Set background color to White because default color sucks
		frame.getContentPane().setBackground(Color.WHITE);

		// Set title of the Frame
		frame.setTitle("Step 1: Select Stocks");

		// Create a Panel to add directions for user
		JPanel SelectStocksTextDisplayPanel = new JPanel();
		frame.getContentPane().add(SelectStocksTextDisplayPanel, BorderLayout.NORTH);

		// Add directions for the user
		Label selectStocksLabel = new Label("Please select the stocks you wish to trade.");
		SelectStocksTextDisplayPanel.add(selectStocksLabel);

		// Create another Panel to add available stocks
		JPanel SelectStocksCheckboxesDisplayPanel = new JPanel();
		frame.getContentPane().add(SelectStocksCheckboxesDisplayPanel, BorderLayout.CENTER);

		// Get the list of available stocks
		ArrayList<String> myArrayList = LoadStocksName();
		List<JCheckBox> checkboxes = new ArrayList<>();

		// Add each list of available stocks to check box so user can select it
		for (String element : myArrayList)
		{
			JCheckBox box = new JCheckBox(element);
			checkboxes.add(box);
			SelectStocksCheckboxesDisplayPanel.add(box);
		}

		// Create another Panel to add available stocks
		JPanel SubmitStocksPanel = new JPanel();
		frame.getContentPane().add(SubmitStocksPanel, BorderLayout.SOUTH);

		// Add submit Button
		JButton btnSubmit = new JButton("Submit");
		btnSubmit.setToolTipText("Submit to start running the simulator.");
		SubmitStocksPanel.add(btnSubmit);

		// Add Action Listener
		btnSubmit.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				// Get lists of all selected checkboxes
				SelectedStocks = new ArrayList<String>();
				for (Component comp : SelectStocksCheckboxesDisplayPanel.getComponents())
				{
					if (comp instanceof JCheckBox)
					{
						if (((JCheckBox) comp).isSelected())
						{
							//add selected stocks to the list
							String addToList = ((JCheckBox) comp).getText();
							SelectedStocks.add(addToList);
						}
					}
				}

				//if selected is empty ask user to select stocks
				if (SelectedStocks.isEmpty())
				{

					JOptionPane.showMessageDialog(null, "Please select at least one stock to trade.");

				} else
				{
					frame.dispose();
					
					//create RunPredictor object
					RunPredictor runPredictor = new RunPredictor();
					
					//Set the names of selected stocks
					runPredictor.setSelectedStocks(SelectedStocks);
					
					//Make the frame visible
					runPredictor.setVisible(true);
				}
			}
		});

		// Format the panel as necessary
		frame.setBounds(100, 100, 450, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	}

}
